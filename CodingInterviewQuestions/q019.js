// Flatten array that contains only numbers and arrays.

const flatten1 = (arr) => {
  if (arr.length === 0) {
    return [];
  }
  const [first, ...rest] = arr;
  const firstFlattened = typeof first === 'number' ? [first] : flatten1(first);
  const secondFlattened = flatten1(rest);
  return [...firstFlattened, ...secondFlattened];
}

const flatten2 = (arr) => {
  return arr.reduce((acc, current) => [...acc, ...(Array.isArray(current) ? flatten2(current) : [current])], []);
}

let start = new Date().getTime();
let res = flatten1([1, [1, 2, [3, 4, 4], [5, [6, [7]]]], [2, 4]]);
let end = new Date().getTime();
console.log('Result1:', res, `execution time: ${end - start}`);

start = new Date().getTime();
res = flatten2([1, [1, 2, [3, 4, 4], [5, [6, [7]]]], [2, 4]]);
end = new Date().getTime();
console.log('Result1:', res, `execution time: ${end - start}`);

start = new Date().getTime();
res = flatten1([1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]]]);
end = new Date().getTime();
console.log('Result1: -', `execution time: ${end - start}`);

start = new Date().getTime();
res = flatten2([1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]], [1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4], 1, [], 5, 1, [4, 1], 1, 4, [4, 5, [3, 1, [1], []], 6], [1, 2, [3, [1, 4], 4], [5, [6, [7]]]], [2, 4]]]);
end = new Date().getTime();
console.log('Result1: -', `execution time: ${end - start}`);